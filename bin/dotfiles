#!/bin/bash
#
# Synchronizes and deploys dotfiles.

set -o errexit
set -o errtrace
set -o nounset

# N.B. If you want to fork this repository and maintain your own dotfiles, you
# must substitute the following variables for your own.
DOTFILES_GIT_URL=${DOTFILES_GIT_URL:-'https://github.com/jmlntw/dotfiles.git'}
DOTFILES_TAR_URL=${DOTFILES_TAR_URL:-'https://github.com/jmlntw/dotfiles/tarball/master'}

DOTFILES_PATH=${DOTFILES_PATH:-"${HOME}/.dotfiles"}

#######################################
# Prints help message.
#######################################
run_help() {
cat <<EOS
Synchronizes and deploys dotfiles.

Usage: $(basename "${0}") [options]

Options:
  -h, --help    Print this help message.
  --sync        Synchronize with the remote repository.
EOS
}

#######################################
# Deploys dotfiles.
#######################################
deploy_dotfiles() {
  e_header '=> Deploying...'

  # Executable files
  deploy_file link 'bin/dotfiles' '.local/bin/dotfiles'

  # Shell
  deploy_file link 'shell/.curlrc' '.curlrc'
  deploy_file link 'shell/.inputrc' '.inputrc'

  # Bash
  deploy_file link 'bash/.bash_aliases' '.bash_aliases'
  deploy_file link 'bash/.bash_exports' '.bash_exports'
  deploy_file link 'bash/.bash_functions' '.bash_functions'
  deploy_file link 'bash/.bash_options' '.bash_options'
  deploy_file link 'bash/.bash_paths' '.bash_paths'
  deploy_file link 'bash/.bash_profile' '.bash_profile'
  deploy_file link 'bash/.bash_prompt' '.bash_prompt'
  deploy_file link 'bash/.bashrc' '.bashrc'

  # Git
  deploy_file link 'git/.gitconfig' '.gitconfig'
  deploy_file link 'git/.gitignore' '.gitignore'

  # Vim
  deploy_file link 'vim/.vimrc' '.vimrc'
  deploy_file link 'vim/.vim/basic.vim' '.vim/basic.vim'
  deploy_file link 'vim/.vim/colors.vim' '.vim/colors.vim'
  deploy_file link 'vim/.vim/mappings.vim' '.vim/mappings.vim'
  deploy_file link 'vim/.vim/plugins.vim' '.vim/plugins.vim'

  # Fontconfig
  deploy_file link 'fontconfig/56-twemoji-color.conf' '.config/fontconfig/conf.d/56-twemoji-color.conf'
  deploy_file link 'fontconfig/69-language-selector-ja.conf' '.config/fontconfig/conf.d/69-language-selector-ja.conf'
  deploy_file link 'fontconfig/69-language-selector-ko.conf' '.config/fontconfig/conf.d/69-language-selector-ko.conf'
  deploy_file link 'fontconfig/69-language-selector-zh-cn.conf' '.config/fontconfig/conf.d/69-language-selector-zh-cn.conf'
  deploy_file link 'fontconfig/69-language-selector-zh-hk.conf' '.config/fontconfig/conf.d/69-language-selector-zh-hk.conf'
  deploy_file link 'fontconfig/69-language-selector-zh-mo.conf' '.config/fontconfig/conf.d/69-language-selector-zh-mo.conf'
  deploy_file link 'fontconfig/69-language-selector-zh-sg.conf' '.config/fontconfig/conf.d/69-language-selector-zh-sg.conf'
  deploy_file link 'fontconfig/69-language-selector-zh-tw.conf' '.config/fontconfig/conf.d/69-language-selector-zh-tw.conf'

  # Mozilla Firefox
  deploy_file link 'firefox/profiles.ini' '.mozilla/firefox/profiles.ini'
  deploy_file link 'firefox/default/user.js' '.mozilla/firefox/default/user.js'

  # Atom Editor
  deploy_file link 'atom/config.cson' '.atom/config.cson'
  deploy_file link 'atom/packages.cson' '.atom/packages.cson'

  # Visual Studio Code
  deploy_file link 'vscode/User/settings.json' '.config/Code/User/settings.json'
  deploy_file link 'vscode/User/extensions.json' '.config/Code/User/extensions.json'
  deploy_file copy 'vscode/Local Storage/file__0.localstorage' '.config/Code/Local Storage/file__0.localstorage'
}

#######################################
# Downloads dotfiles.
#######################################
download_dotfiles() {
  e_header '=> Downloading...'

  if command_exists 'git'; then
    # Use Git to clone the repository.
    git clone --depth 1 --recursive "${DOTFILES_GIT_URL}" "${DOTFILES_PATH}"
  elif command_exists 'curl' || command_exists 'wget'; then
    if command_exists 'curl'; then
      # Use cURL to download tarball.
      curl -L -o "${HOME}/dotfiles.tar.gz" "${DOTFILES_TAR_URL}"
    elif command_exists 'wget'; then
      # Use Wget to download tarball.
      wget -O "${HOME}/dotfiles.tar.gz" "${DOTFILES_TAR_URL}"
    fi
    # Extract the tarball.
    mkdir -p "${DOTFILES_PATH}"
    tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_PATH}"
    rm -rf "${HOME}/dotfiles.tar.gz"
  else
    die 'Either Git, cURL or Wget is required.'
  fi
}

#######################################
# Synchronizes dotfiles.
#######################################
sync_dotfiles() {
  e_header '=> Synchronizing...'

  if ! command_exists 'git'; then
    echo 'Git is not installed. Skip synchronization.'
    return 0
  fi

  # Switch to dotfiles directory.
  cd "${DOTFILES_PATH}"

  # Initialize the repository if necessary.
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    git init
    git remote add origin "${DOTFILES_GIT_URL}"
    git fetch origin master
  fi

  # Reset the repository.
  git reset --hard FETCH_HEAD
  git clean -fd
  # Pull from the remote repository.
  git pull --rebase origin master
  # Initialize and update all Git submodules.
  git submodule init
  git submodule update
  git submodule foreach git pull origin master
}

#######################################
# Deploys a single file from dotfiles
# to home directory.
#######################################
deploy_file() {
  local method="${1:-link}"
  local src="${DOTFILES_PATH}/${2}"
  local dest="${HOME}/${3}"

  # Test whether the source file exists.
  if [[ ! -f "${src}" ]]; then
    die "File not found: ${src}"
  fi

  # Backup the destination file if exists.
  if [[ -f "${dest}" ]] && [[ ! -L "${dest}" ]]; then
    mv "${dest}" "${dest}.bak"
  fi

  # Create the destination directory.
  mkdir -p "$(dirname "${dest}")"

  # Use specified method to deploy the file.
  case "${method}" in
    link) ln -fns "${src}" "${dest}" && echo "Linked: ~/${3}" ;;
    copy) cp -f "${src}" "${dest}" && echo "Copied: ~/${3}" ;;
  esac
}

#######################################
# Tests whether a command exists.
#######################################
command_exists() {
  command -v "$@" >/dev/null 2>&1
}

#######################################
# Exits this script with a failure
# message and returns an exit code.
#######################################
die() {
  e_failure "Terminated: ${1}" 1>&2
  exit "${2:-1}"
}

#######################################
# Prints a header message.
#######################################
e_header() {
  printf '\033[1;37m%s\033[0m\n' "$@"
}

#######################################
# Prints a success message.
#######################################
e_success() {
  printf '\033[0;32m%s %s\033[0m\n' '✔' "$@"
}

#######################################
# Prints a failure message.
#######################################
e_failure() {
  printf '\033[0;31m%s %s\033[0m\n' '✘' "$@"
}

#######################################
# The main program.
#######################################
main() {
  local opt_sync=false

  # Trap all errors and then print the error line number.
  trap 'die "There was an error at line ${LINENO}".' ERR

  # Test for all known options.
  for opt in "$@"; do
    case "${opt}" in
      '-h'|'--help') run_help; exit ;;
      '--sync')      opt_sync=true ;;
    esac
  done

  # Print header messages.
  e_header '--------------'
  e_header '  # dotfiles  '
  e_header '--------------'
  echo "* DOTFILES_GIT_URL : ${DOTFILES_GIT_URL}"
  echo "* DOTFILES_TAR_URL : ${DOTFILES_TAR_URL}"
  echo "* DOTFILES_PATH    : ${DOTFILES_PATH}"

  # Download dotfiles if not exist.
  if [[ ! -d "${DOTFILES_PATH}" ]]; then
    download_dotfiles
    opt_sync=false
  fi

  # Synchronize dotfiles if necessary.
  if $opt_sync; then
    sync_dotfiles
  fi

  # Deploy dotfiles.
  deploy_dotfiles

  # Restart the shell automatically if running by `bash -c`.
  if [[ -n "${BASH_EXECUTION_STRING:-}" ]]; then
    exec "${SHELL:-'/bin/bash'}"
  else
    e_success 'Done. Restart the shell before continuing.'
  fi
}

main "$@"

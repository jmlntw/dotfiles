#!/bin/bash
#
# Installs or synchronizes dotfiles.

set -o errexit
set -o errtrace
set -o nounset

# N.B. If you want to fork this repository and maintain your own dotfiles, you
# must substitute the following variables for your own.
DOTFILES_GIT_URL=${DOTFILES_GIT_URL:-'https://github.com/jmlntw/dotfiles.git'}
DOTFILES_TAR_URL=${DOTFILES_TAR_URL:-'https://github.com/jmlntw/dotfiles/tarball/master'}

DOTFILES_PATH=${DOTFILES_PATH:-"${HOME}/.dotfiles"}

#######################################
# Prints help message.
# Usage: run_help
#######################################
run_help() {
cat <<EOS
Installs or synchronizes dotfiles.

Usage: ${0##*/} [options]

Options:
  -h, --help    Print this help message.
  --no-sync     Suppress pulling from the remote repository.
EOS
}

#######################################
# Installs dotfiles.
# Usage: install_dotfiles
#######################################
install_dotfiles() {
  e_header '=> Installing...'

  # Executable files
  link_file 'bin/dotfiles' '.local/bin/dotfiles'

  # Shell
  link_file 'shell/.inputrc' '.inputrc'
  link_file 'shell/.curlrc'  '.curlrc'

  # Bash
  link_file 'bash/.bashrc'         '.bashrc'
  link_file 'bash/.bash_profile'   '.bash_profile'
  link_file 'bash/.bash_aliases'   '.bash_aliases'
  link_file 'bash/.bash_exports'   '.bash_exports'
  link_file 'bash/.bash_functions' '.bash_functions'
  link_file 'bash/.bash_options'   '.bash_options'
  link_file 'bash/.bash_paths'     '.bash_paths'
  link_file 'bash/.bash_prompt'    '.bash_prompt'

  # Git
  link_file 'git/.gitconfig' '.gitconfig'
  link_file 'git/.gitignore' '.gitignore'

  # Vim
  link_file 'vim/.vimrc'            '.vimrc'
  link_file 'vim/.vim/basic.vim'    '.vim/basic.vim'
  link_file 'vim/.vim/colors.vim'   '.vim/colors.vim'
  link_file 'vim/.vim/mappings.vim' '.vim/mappings.vim'
  link_file 'vim/.vim/plugins.vim'  '.vim/plugins.vim'

  # Fontconfig
  link_file 'fontconfig/30-cjk-aliases.conf'             '.config/fontconfig/conf.d/30-cjk-aliases.conf'
  link_file 'fontconfig/56-twemoji-color.conf'           '.config/fontconfig/conf.d/56-twemoji-color.conf'
  link_file 'fontconfig/69-language-selector-ja.conf'    '.config/fontconfig/conf.d/69-language-selector-ja.conf'
  link_file 'fontconfig/69-language-selector-ko.conf'    '.config/fontconfig/conf.d/69-language-selector-ko.conf'
  link_file 'fontconfig/69-language-selector-zh-cn.conf' '.config/fontconfig/conf.d/69-language-selector-zh-cn.conf'
  link_file 'fontconfig/69-language-selector-zh-hk.conf' '.config/fontconfig/conf.d/69-language-selector-zh-hk.conf'
  link_file 'fontconfig/69-language-selector-zh-mo.conf' '.config/fontconfig/conf.d/69-language-selector-zh-mo.conf'
  link_file 'fontconfig/69-language-selector-zh-sg.conf' '.config/fontconfig/conf.d/69-language-selector-zh-sg.conf'
  link_file 'fontconfig/69-language-selector-zh-tw.conf' '.config/fontconfig/conf.d/69-language-selector-zh-tw.conf'

  # Mozilla Firefox
  copy_file 'firefox/profiles.ini'    '.mozilla/firefox/profiles.ini'
  link_file 'firefox/default/user.js' '.mozilla/firefox/default/user.js'

  # Atom
  link_file 'atom/config.cson'   '.atom/config.cson'
  link_file 'atom/packages.cson' '.atom/packages.cson'

  # Visual Studio Code
  link_file 'vscode/User/settings.json'                 '.config/Code/User/settings.json'
  link_file 'vscode/User/locale.json'                   '.config/Code/User/locale.json'
  link_file 'vscode/User/extensions.json'               '.config/Code/User/extensions.json'
  copy_file 'vscode/Local Storage/file__0.localstorage' '.config/Code/Local Storage/file__0.localstorage'
}

#######################################
# Downloads dotfiles from the remote
# repository.
# Usage: download_dotfiles
#######################################
download_dotfiles() {
  e_header '=> Downloading...'

  if command_exists 'git'; then
    # Use Git to clone the remote repository.
    git clone --depth 1 --recursive "${DOTFILES_GIT_URL}" "${DOTFILES_PATH}"
  elif command_exists 'curl' || command_exists 'wget'; then
    # Use cURL or Wget to download the tarball.
    if command_exists 'curl'; then
      curl -L -o "${HOME}/dotfiles.tar.gz" "${DOTFILES_TAR_URL}"
    elif command_exists 'wget'; then
      wget -O "${HOME}/dotfiles.tar.gz" "${DOTFILES_TAR_URL}"
    fi
    # Extract the tarball to dotfiles directory.
    mkdir -p "${DOTFILES_PATH}"
    tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_PATH}"
    rm -rf "${HOME}/dotfiles.tar.gz"
  else
    die 'Either Git, cURL or Wget is required.'
  fi
}

#######################################
# Synchronizes dotfiles with the remote
# repository.
# Usage: sync_dotfiles
#######################################
sync_dotfiles() {
  e_header '=> Synchronizing...'

  if ! command_exists 'git'; then
    e_warning 'Git is not installed. Skipped synchronization.'
    return 0
  fi

  cd "${DOTFILES_PATH}"

  if ! is_git_repo; then
    # Initialize the Git repository.
    git init
    git remote add origin "${DOTFILES_GIT_URL}"
    git fetch origin master
    # Reset the repository.
    git reset --hard FETCH_HEAD
    git clean -fd
  fi

  # Update from the remote repository.
  git pull --rebase origin master
  git submodule update --recursive --init --quiet
}

#######################################
# Creates a symbolic link between
# dotfiles and home directory.
# Usage: link_file SOURCE DEST
#######################################
link_file() {
  local source="${DOTFILES_PATH}/${1}"
  local dest="${HOME}/${2}"

  # Exit if the source file does not exist.
  if [[ ! -f "${source}" ]]; then
    die "File not found: ${source}"
  fi

  # Create a backup if the target file exists.
  if [[ -f "${dest}" ]] && [[ ! -L "${dest}" ]]; then
    mv "${dest}" "${dest}~"
  fi

  mkdir -p "${dest%/*}"
  ln -fs "${source}" "${dest}"

  e_success "Linked: ${1} -> ~/${2}"
}

#######################################
# Copies a file from dotfiles to home
# directory.
# Usage: copy_file SOURCE DEST
#######################################
copy_file() {
  local source="${DOTFILES_PATH}/${1}"
  local dest="${HOME}/${2}"

  # Exit if the source file does not exist.
  if [[ ! -f "${source}" ]]; then
    die "File not found: ${source}"
  fi

  # Create a backup if the target file exists.
  if [[ -f "${dest}" ]]; then
    mv "${dest}" "${dest}~"
  fi

  mkdir -p "${dest%/*}"
  cp -f "${source}" "${dest}"

  e_success "Copied: ${1} -> ~/${2}"
}

#######################################
# Tests whether we are in a Git
# repository.
# Usage: is_git_repo
#######################################
is_git_repo() {
  git rev-parse --is-inside-work-tree &>/dev/null
}

#######################################
# Tests whether a command exists.
# Usage: command_exists COMMAND...
#######################################
command_exists() {
  command -v "$@" >/dev/null 2>&1
}

#######################################
# Exits this script with a failure
# message and returns an exit code.
# Usage: die MESSAGE [STATUS]
#######################################
die() {
  e_failure "Terminated: ${1}" 1>&2
  exit "${2:-1}"
}

#######################################
# Prints a header message.
# Usage: e_header MESSAGE
#######################################
e_header() {
  printf '\033[1;37m%s\033[0m\n' "$@"
}

#######################################
# Prints a success message.
# Usage: e_success MESSAGE
#######################################
e_success() {
  printf '\033[0;32m%s %s\033[0m\n' '✔' "$@"
}

#######################################
# Prints a failure message.
# Usage: e_failure MESSAGE
#######################################
e_failure() {
  printf '\033[0;31m%s %s\033[0m\n' '✘' "$@"
}

#######################################
# Prints a warning message.
# Usage: e_warning MESSAGE
#######################################
e_warning() {
  printf '\033[0;33m%s %s\033[0m\n' '!' "$@"
}

#######################################
# Starts this script.
# Usage: main [OPTION]...
#######################################
main() {
  trap 'die "There was an error at line ${LINENO}."' ERR

  local opt_sync=true

  # Test for all known options.
  for opt in "$@"; do
    case "${opt}" in
      -h|--help) run_help; exit ;;
      --no-sync) opt_sync=false ;;
    esac
  done

  # Get dotfiles from the remote repository.
  if [[ ! -d "${DOTFILES_PATH}" ]]; then
    download_dotfiles
  elif $opt_sync; then
    sync_dotfiles
  fi

  # Install dotfiles.
  install_dotfiles

  echo 'Completed.'
  echo 'Restart the shell before you continue.'
}

main "$@"

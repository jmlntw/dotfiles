#!/bin/bash
#
# Synchronizes and deploys dotfiles.

set -o errexit
set -o errtrace
set -o nounset

# N.B. If you want to fork this repository and maintain your own dotfiles, you
# must substitute the following variables for your own.
DOTFILES_GIT_URL=${DOTFILES_GIT_URL:-'https://github.com/jmlntw/dotfiles.git'}
DOTFILES_TAR_URL=${DOTFILES_TAR_URL:-'https://github.com/jmlntw/dotfiles/tarball/master'}

DOTFILES_PATH=${DOTFILES_PATH:-"${HOME}/.dotfiles"}

#######################################
# Prints help message.
#######################################
run_help() {
cat <<EOS
Synchronizes and deploys dotfiles.

Usage: $(basename "${0}") [options]

Options:
  -h, --help    Print this help message.
  --no-sync     Suppress pulling from the remote repository.
EOS
}

#######################################
# Deploys dotfiles.
#######################################
deploy_dotfiles() {
  e_info 'Deploying executable files...'
  link_file 'bin/dotfiles'      '.local/bin/dotfiles'

  e_info 'Deploying shell...'
  link_file 'shell/.curlrc'   '.curlrc'
  link_file 'shell/.inputrc'  '.inputrc'

  e_info 'Deploying Bash...'
  link_file 'bash/.bash_aliases'    '.bash_aliases'
  link_file 'bash/.bash_exports'    '.bash_exports'
  link_file 'bash/.bash_functions'  '.bash_functions'
  link_file 'bash/.bash_options'    '.bash_options'
  link_file 'bash/.bash_paths'      '.bash_paths'
  link_file 'bash/.bash_profile'    '.bash_profile'
  link_file 'bash/.bash_prompt'     '.bash_prompt'
  link_file 'bash/.bashrc'          '.bashrc'

  e_info 'Deploying Git...'
  link_file 'git/.gitconfig' '.gitconfig'
  link_file 'git/.gitignore' '.gitignore'

  e_info 'Deploying Vim...'
  link_file 'vim/.vimrc'             '.vimrc'
  link_file 'vim/.vim/basic.vim'     '.vim/basic.vim'
  link_file 'vim/.vim/colors.vim'    '.vim/colors.vim'
  link_file 'vim/.vim/mappings.vim'  '.vim/mappings.vim'
  link_file 'vim/.vim/plugins.vim'   '.vim/plugins.vim'

  e_info 'Deploying font configuration...'
  link_file 'fontconfig/56-twemoji-color.conf'            '.config/fontconfig/conf.d/56-twemoji-color.conf'
  link_file 'fontconfig/69-language-selector-ja.conf'     '.config/fontconfig/conf.d/69-language-selector-ja.conf'
  link_file 'fontconfig/69-language-selector-ko.conf'     '.config/fontconfig/conf.d/69-language-selector-ko.conf'
  link_file 'fontconfig/69-language-selector-zh-cn.conf'  '.config/fontconfig/conf.d/69-language-selector-zh-cn.conf'
  link_file 'fontconfig/69-language-selector-zh-hk.conf'  '.config/fontconfig/conf.d/69-language-selector-zh-hk.conf'
  link_file 'fontconfig/69-language-selector-zh-mo.conf'  '.config/fontconfig/conf.d/69-language-selector-zh-mo.conf'
  link_file 'fontconfig/69-language-selector-zh-sg.conf'  '.config/fontconfig/conf.d/69-language-selector-zh-sg.conf'
  link_file 'fontconfig/69-language-selector-zh-tw.conf'  '.config/fontconfig/conf.d/69-language-selector-zh-tw.conf'

  e_info 'Deploying Mozilla Firefox...'
  link_file 'firefox/profiles.ini'    '.mozilla/firefox/profiles.ini'
  link_file 'firefox/default/user.js' '.mozilla/firefox/default/user.js'

  e_info 'Deploying Atom Editor...'
  link_file 'atom/config.cson'    '.atom/config.cson'
  link_file 'atom/packages.cson'  '.atom/packages.cson'

  e_info 'Deploying Visual Studio Code...'
  link_file 'vscode/User/settings.json'                 '.config/Code/User/settings.json'
  link_file 'vscode/User/extensions.json'               '.config/Code/User/extensions.json'
  copy_file 'vscode/Local Storage/file__0.localstorage' '.config/Code/Local Storage/file__0.localstorage'
}

#######################################
# Downloads dotfiles.
#######################################
download_dotfiles() {
  e_info 'Downloading dotfiles...'

  if has 'git'; then
    # Use Git to clone dotfiles repository.
    git clone --depth 1 --recursive "${DOTFILES_GIT_URL}" "${DOTFILES_PATH}"
  elif has 'curl' || has 'wget'; then
    if has 'curl'; then
      # Use cURL to download dotfiles tarball.
      curl -L -o "${HOME}/dotfiles.tar.gz" "${DOTFILES_TAR_URL}"
    elif has 'wget'; then
      # Use Wget to download dotfiles tarball.
      wget -O "${HOME}/dotfiles.tar.gz" "${DOTFILES_TAR_URL}"
    fi
    # Extract dotfiles tarball.
    mkdir -p "${DOTFILES_PATH}"
    tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_PATH}"
    rm -rf "${HOME}/dotfiles.tar.gz"
  else
    die 'Either Git, cURL or Wget is required.'
  fi
}

#######################################
# Synchronizes dotfiles.
#######################################
sync_dotfiles() {
  # Skip synchronization if Git is not installed.
  if ! has 'git'; then
    e_warning 'Git is not installed. Skip synchronization.'
    return 0
  fi

  e_info 'Synchronizing dotfiles...'

  # Make sure we are in dotfiles directory.
  cd "${DOTFILES_PATH}" || die "Failed to open directory: '${DOTFILES_PATH}'"

  # Initialize Git repository if necessary.
  if ! is_git_repo "${DOTFILES_PATH}"; then
    git init
    git remote add origin "${DOTFILES_GIT_URL}"
  fi

  # Unstage all changed files.
  git reset HEAD
  # Remove untracked files.
  git clean -fd
  # Pull Git repository.
  git pull --rebase origin master
  # Initialize and update all Git submodules.
  git submodule init
  git submodule update
  git submodule foreach git pull origin master
}

#######################################
# Creates a symbolic link from dotfiles
# to home directory.
#######################################
link_file() {
  local src="${DOTFILES_PATH}/${1}"
  local dest="${HOME}/${2}"

  # Test whether the source file exists.
  if [[ ! -f "${src}" ]]; then
    die "File not found: '${src}'"
  fi

  # Backup the destination file if exists.
  if [[ -f "${dest}" ]] && [[ ! -L "${dest}" ]]; then
    mv "${dest}" "${dest}.bak"
  fi

  # Create the destination directory if necessary and then create a symbolic
  # link to destination.
  mkdir -p "$(dirname "${dest}")" && ln -fns "${src}" "${dest}"

  if is_success; then
    e_success "Linked: '${1}' to '~/${2}'"
  else
    die "Failed to link: '${1}' to '~/${2}'"
  fi
}

#######################################
# Copies a file from dotfiles to home
# directory.
#######################################
copy_file() {
  local src="${DOTFILES_PATH}/${1}"
  local dest="${HOME}/${2}"

  # Test whether the source file exists.
  if [[ ! -f "${src}" ]]; then
    die "File not found: '${src}'"
  fi

  # Backup the destination file if exists.
  if [[ -f "${dest}" ]]; then
    mv "${dest}" "${dest}.bak"
  fi

  # Create the destination directory if necessary and then copy the source file
  # to destination.
  mkdir -p "$(dirname "${dest}")" && cp -f "${src}" "${dest}"

  if is_success; then
    e_success "Copied: '${1}' to '~/${2}'"
  else
    die "Failed to copy: '${1}' to '~/${2}'"
  fi
}

#######################################
# Tests whether a command exists.
#######################################
has() {
  type -P "${1}" &>/dev/null
  return $?
}

#######################################
# Tests whether we are in a Git
# repository.
#######################################
is_git_repo() {
  git rev-parse --is-inside-work-tree &>/dev/null
  return $?
}

#######################################
# Tests whether the previous command
# succeeded.
#######################################
is_success() {
  return $?
}

#######################################
# Exits this script with a failure
# message and returns an exit code.
#######################################
die() {
  e_failure "Terminated: ${1}" 1>&2
  exit "${2:-1}"
}

#######################################
# Prints a blank line.
#######################################
e_newline() {
  printf '\n'
}

#######################################
# Prints a normal message.
#######################################
e_normal() {
  printf '\033[0m%s\033[0m\n' "$@"
}

#######################################
# Prints a header message.
#######################################
e_header() {
  printf '\033[1;37m%s\033[0m\n' "$@"
}

#######################################
# Prints an information message.
#######################################
e_info() {
  printf '\033[0;36m%s %s\033[0m\n' '➜' "$@"
}

#######################################
# Prints a success message.
#######################################
e_success() {
  printf '\033[0;32m%s %s\033[0m\n' '✔' "$@"
}

#######################################
# Prints a failure message.
#######################################
e_failure() {
  printf '\033[0;31m%s %s\033[0m\n' '✘' "$@"
}

#######################################
# Prints an warning message.
#######################################
e_warning() {
  printf '\033[0;33m%s %s\033[0m\n' '❗' "$@"
}

#######################################
# The main program.
#######################################
main() {
  local sync=true

  # Test for all known flags.
  for opt in "$@"; do
    case "${opt}" in
      '-h'|'--help') run_help; exit ;;
      '--no-sync')   sync=false ;;
    esac
  done

  # Print logo and header messages.
  e_header '      _       _    __ _ _            '
  e_header '   __| | ___ | |_ / _(_) | ___  ___  '
  e_header '  / _` |/ _ \| __| |_| | |/ _ \/ __| '
  e_header ' | (_| | (_) | |_|  _| | |  __/\__ \ '
  e_header '  \__,_|\___/ \__|_| |_|_|\___||___/ '
  e_newline
  e_normal "  * Remote: ${DOTFILES_GIT_URL}"
  e_normal "  * Local:  ${DOTFILES_PATH}"
  e_newline

  # Download dotfiles if not exist.
  if [[ ! -d "${DOTFILES_PATH}" ]]; then
    download_dotfiles
    # Do not synchronize dotfiles again.
    sync=false
  fi

  # Switch to the dotfiles directory.
  cd "${DOTFILES_PATH}" || die "Failed to open directory: '${DOTFILES_PATH}'"

  # Synchronize dotfiles if necessary.
  if $sync; then
    sync_dotfiles
  fi

  # Deploy dotfiles.
  deploy_dotfiles

  e_newline
  # Restart the shell automatically if running by `bash -c "$(curl -L {URL})"`.
  if [[ -n "${BASH_EXECUTION_STRING:-}" ]]; then
    e_info 'Restarting your shell...'
    exec "${SHELL:-'/bin/bash'}"
  else
    e_warning 'Restart your shell before continuing.'
  fi
}

main "$@"
